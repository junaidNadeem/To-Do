{"version":3,"sources":["logo.svg","api/httpClient.js","api/todoApi.js","actions/todoActions.js","component/todoComponents/todoRow.js","component/todoComponents/editTodo.js","component/todoComponents/todoTable.js","component/container/todoContainer.js","Routes.js","reducers/todoReducers.js","reducers/rootReducer.js","store/configureStore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HttpClient","url","arguments","length","undefined","data","config","axios","post","put","delete","TODO_API","concat","TodoApi","createTodo","todo","getTodo","updateTodo","removeTodo","id","CREATE_TODO","CREATE_TODO_SUCCESS","CREATE_TODO_ERROR","GET_TODOS","GET_TODOS_SUCCESS","GET_TODOS_ERROR","START_EDITING","CANCEL_EDITING","UPDATE_TODO","UPDATE_TODO_SUCCESS","UPDATE_TODO_ERROR","COMPLETE_TODO","DELETE_TODO","DELETE_TODO_SUCCESS","DELETE_TODO_ERROR","CreateTodo","dispatch","getState","then","res","CreateTodoSuccess","type","GetTodos","dispactch","GetTodoSuccess","todos","StartEditing","CancelEditing","UpdateTodo","UpdateTodoSuccess","editing","DeleteTodo","status","DeleteTodoSuccess","getClassName","props","updating","deleting","TodoRow","react_default","a","createElement","Table","Row","className","Cell","title","description","date","Button","color","onClick","completeTodo","startEditing","deleteTodo","EditTodo","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","emptyTodo","Date","changeNewTitle","event","setState","target","value","changeNewDescription","changeNewDate","resetTodo","state","editTodo","cancelEditing","objectSpread","Input","placeholder","onChange","entry_default","Options","cancelEdit","Component","EditOptions","AddOptions","TodoTable","celled","Header","HeaderCell","Body","map","t","e","key","todoRow","TodoContainer","_Component","actions","inherits","createClass","href","style","marginTop","todoTable","connect","ownProps","bindActionCreators","TodoActions","Routes","BrowserRouter","Switch","Route","path","component","action","rootReducer","combineReducers","toConsumableArray","s","filter","loggerMiddleware","createLogger","preloadedState","store","createStore","applyMiddleware","thunkMiddleware","App","es","Routes_Routes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8ae5a849.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios' \n\n\n//Create a Http Client using Axios. Further modifications in this layer can be done later like Authorization.\n\nconst post = (url = '', data = '', config = {}) => {\n    return axios.post(url, data, config)\n}\n\nconst get = (url) => {\n    return axios(url)\n}\n\nconst put = (url = '', data = '', config = {}) => {\n    return axios.put(url, data, config)\n}\n\n//Cannot contain a delete method - Cause delete is a keyword.\n\nconst del = (url = '', config = {}) => {\n    return axios.delete(url, config)\n}\n\n//Encapsulating in a JSON object\n\nconst HttpClient = {\n    post,\n    get,\n    put,\n    delete: del\n}\n\nexport {HttpClient}","import {HttpClient} from './httpClient' \n\n// This is the API. The backend root URL can be set from here.\n\nconst API = 'http://localhost:3006/api'\n\n//Setting the todos URI\n\nconst TODO_API = `${API}/todos`\n\n// The CRUD Operations of the Todo Resource.\n\n\n//Create\nconst createTodo = todo => {\n    return HttpClient.post(TODO_API, todo)\n}\n\n//Read\nconst getTodo = () => {\n    return HttpClient.get(TODO_API)\n}\n\n//Update\nconst updateTodo = todo => {\n    return HttpClient.put(TODO_API, todo)\n}\n\n//Delete\nconst removeTodo = todo => {\n    return HttpClient.delete(`${TODO_API}/${todo.id}`)\n}\n\n\n//Encapsulating in a JSON object\n\nconst TodoApi = {createTodo, getTodo, updateTodo, removeTodo}\n\nexport {TodoApi}","import { TodoApi } from \"../api/todoApi\";\n\n\n// These are the action type constants. Ordered by CRUD order. \n// There is a pattern of Action, Action_Success, Action_Error action types for the Async actions. \n\n\n\n//Create\nexport const CREATE_TODO = '[Todo] CREATE_TODO' \nexport const CREATE_TODO_SUCCESS = '[Todo] CREATE_TODO_SUCCESS' \nexport const CREATE_TODO_ERROR = '[Todo] CREATE_TODO_ERROR' \n\n\n//Read\nexport const GET_TODOS = '[Todo] GET_TODOS' \nexport const GET_TODOS_SUCCESS = '[Todo] GET_TODOS_SUCCESS' \nexport const GET_TODOS_ERROR = '[Todo] GET_TODOS_ERROR' \n\n\n//Update\nexport const START_EDITING ='[Todo] START_EDITING'\nexport const CANCEL_EDITING = '[Todo] CANCEL_EDITING'\n\nexport const UPDATE_TODO = '[Todo] UPDATE_TODO' \nexport const UPDATE_TODO_SUCCESS = '[Todo] UPDATE_TODO_SUCCESS' \nexport const UPDATE_TODO_ERROR = '[Todo] UPDATE_TODO_ERROR' \n\nexport const COMPLETE_TODO = 'COMPLETE_TODO'\n\n\n//Delete\nexport const DELETE_TODO = '[Todo] DELETE_TODO' \nexport const DELETE_TODO_SUCCESS = '[Todo] DELETE_TODO_SUCCESS' \nexport const DELETE_TODO_ERROR = '[Todo] DELETE_TODO_ERROR' \n\n\n\n \n//These are the action types Also ordered in CRUD Order.\n\n//Create\n\n//The dispatch and getstate function is provided by the Redux-Thunk middleware, we can dispatch actions with it.\n\nexport function CreateTodo(todo){\n    return (dispatch, getState) => {\n        return TodoApi.createTodo(todo).then(res => {\n            dispatch(CreateTodoSuccess(res.data))\n        })\n    }\n}\n\nexport function CreateTodoSuccess(todo){\n    return {\n        type:CREATE_TODO_SUCCESS,\n        todo\n    }\n}\n\n\n//Read\nexport function GetTodos(){\n    return (dispactch, getState) => {\n        return TodoApi.getTodo().then(res => {\n            dispactch(GetTodoSuccess(res))\n        })\n    }\n}\n\nexport function GetTodoSuccess(todos){\n    return {\n        type:GET_TODOS_SUCCESS,\n        todos\n    }\n}\n\n\n//Update\nexport function StartEditing(id) {\n    return {\n        type: START_EDITING,\n        id\n    }\n}\nexport function CancelEditing(id) {\n    return {\n        type: CANCEL_EDITING,\n        id\n    }\n}\n\nexport function UpdateTodo(todo) {\n    return (dispatch, getState) => {\n        \n        //Multiple actions can be sent usign the Redux-Thunk middleware\n\n        dispatch({\n            type: UPDATE_TODO,\n            todo\n        })\n        TodoApi.updateTodo(todo).then(res => {\n            dispatch(UpdateTodoSuccess(res.data))\n        })\n    }\n}\nexport function UpdateTodoSuccess(todo) {\n    todo.editing = false;\n    return {\n        type: UPDATE_TODO_SUCCESS,\n        todo,\n\n        id: todo.id\n    }\n}\n\n\n//Delete\nexport function DeleteTodo(todo) {\n    return (dispatch, getState) => {\n        dispatch({\n            type: DELETE_TODO,\n            todo\n        })\n        TodoApi.removeTodo(todo).then(res => {\n            if (res.status == 204) {\n                dispatch(DeleteTodoSuccess(todo))\n            }\n        })\n    }\n}\nexport function DeleteTodoSuccess(todo) {\n    return {\n        type: DELETE_TODO_SUCCESS,\n        todo,\n        id: todo.id\n    }\n}","import React, {Component} from 'react';\n\nimport {Button, Table} from 'semantic-ui-react'\n\n// The Todo Row component is a simple stateless component, It simply takes the props \n// and maps the specific events to the methods of parent component \n\nconst TodoRow = (props) => {\n    return (\n\n        // getClass Name assigns the class names of this element \n\n        <Table.Row className={getClassName(props)}>\n            <Table.Cell>{props.todo.title}</Table.Cell>\n            <Table.Cell>{props.todo.description}</Table.Cell>\n            <Table.Cell>{props.todo.date}</Table.Cell>\n            <Table.Cell className=\"options\">\n                {props.todo.status != 'done' && <Button className=\"option-buttons\" color='green' onClick={props.completeTodo}>\n                    <i className=\"fa fa-check\"></i>\n                </Button>}\n                <Button className=\"option-buttons\" color='blue' onClick={props.startEditing}>\n                    <i className=\"fa fa-pencil\"></i>\n                </Button>\n                <Button className=\"option-buttons\" color='red' onClick={props.deleteTodo}>\n                    <i className=\"fa fa-trash\"></i>\n                </Button>\n            </Table.Cell>\n        </Table.Row>\n    );\n}\n\n// Right now Updating, done and deleting these three states are represented with different Class Name\n\nconst getClassName = (props) => {\n    return `\n    \n    ${props.todo.updating\n        ? \"updating\"\n        : \"\"}\n    ${props.todo.status == 'done'\n            ? \"done\"\n            : \"\"}\n    ${props.todo.deleting\n                ? \"deleting\"\n                : \"\"}\n    `\n}\n\nexport default TodoRow;","\nimport React, {Component} from 'react';\n\nimport {Button, Icon, Label, Menu, Table} from 'semantic-ui-react'\nimport {Input} from 'semantic-ui-react'\n\n//Import moment library for React Datepicker\n\nimport {moment} from 'moment';\n\nimport DatePicker from 'react-date-picker';\n\nclass EditTodo extends Component {\n\n    constructor(props) {\n        super(props);\n        // If props.todo exists this component is used to  Edit a Todo, \n        // else this is a Create New Todo Component\n\n        if (this.props.todo) {\n            this.state = {\n                ...this.props.todo\n            }\n        } else {\n            this.state = {\n                ...this.emptyTodo()\n            }\n        }\n    }\n\n    //Initializes a Empty Todo Object\n\n    emptyTodo = function(){\n        return {title: \"\", description: \"\", date: new Date()}\n    }\n\n\n    // Input change handling methods\n\n    changeNewTitle = (event) => {\n        this.setState({title: event.target.value})\n    }\n\n    changeNewDescription = (event) => {\n        this.setState({description: event.target.value})\n    }\n\n    changeNewDate = (event) => {\n        this.setState({date: event})\n    }\n\n    // Form submission methods\n\n    createTodo = (event) => {\n        this.resetTodo()\n        this.props.createTodo(this.state)\n    }\n    editTodo = (event) => {\n        this.props.editTodo(this.state)\n    }\n\n\n    // Modifying the inputs indirectly methods\n\n    resetTodo = () => {\n        this.setState({title: \"\", description: \"\", date:new Date()})\n    }\n    cancelEditing = () => {\n        this.props.cancelEditing();\n    }\n\n    // Convert the date to moment object for the React DatePicker\n\n    getDateForDatePicker() {\n        return new Date(this.state.date)\n    }\n\n    render() {\n        return (\n            <Table.Row>\n\n                <Table.Cell>\n\n                    {/* The Value flows the data from the state to the control */}\n                    {/* The onChange method pass the value from the Control to the State, It takes a method reference */}\n                    {/* In this way a controlled two way binding is established */}\n\n                    <Input                        \n                        placeholder='Title'\n                        value={this.state.title}\n                        onChange={this.changeNewTitle}/>\n                </Table.Cell>\n\n                <Table.Cell>\n                    <Input\n                        placeholder='Description'\n                        value={this.state.description}\n                        onChange={this.changeNewDescription}/>\n                </Table.Cell>\n\n                <Table.Cell>\n\n                    {/* React Datepicker gets the moment date from the class method */}\n\n                    <DatePicker\n                        value = {this.state.date instanceof Date ? this.state.date : new Date(this.state.date)}\n                        onChange={this.changeNewDate}\n                        />\n                </Table.Cell>\n\n                {/* The options component takes the inputs and decide if It's an option for a Edit Todo or Add New Todo */}\n\n                <Options\n                    todo={this.props.todo}    \n                    editTodo={this.editTodo}\n                    createTodo={this.createTodo}\n                    resetTodo={this.resetTodo}\n                    cancelEdit={this.cancelEditing}\n                />\n\n            </Table.Row>\n        )\n    }\n}\n\nexport default EditTodo;\n\n\n// The option component decides the component usage\n\nconst Options = (props) => {\n    if (props.todo && props.todo.editing) {\n        return EditOptions(props);\n    } else {\n        return AddOptions(props);\n    }\n}\n\n// The two local components - EditOptions and AddOptions simply maps their events \n// to the state events of their parent compoent through the props\n\n\nconst EditOptions = (props) => {\n    return (\n        <Table.Cell>\n            <Button color='green' onClick={props.editTodo}>\n                Edit\n            </Button>\n            < Button color='blue' onClick={props.cancelEdit}>\n                Cancel\n            </Button>\n        </Table.Cell>\n    );\n}\n\nconst AddOptions = (props) => {\n    return (\n        <Table.Cell>\n            <Button color='green' onClick={props.createTodo}>\n                Create\n            </Button>\n            < Button color='blue' onClick={props.resetTodo}>\n                Reset\n            </Button>\n        </Table.Cell>\n    );\n}","import React, {Component} from 'react';\n\nimport {Button, Icon, Label, Menu, Table} from 'semantic-ui-react'\nimport TodoRow from './todoRow'\nimport EditTodo from './editTodo'\n\n\n// TodoTable is a Stateless component\n\nconst TodoTable = (props) => {\n    return (\n\n        <Table celled>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Title</Table.HeaderCell>\n                    <Table.HeaderCell>Description</Table.HeaderCell>\n                    <Table.HeaderCell>Date</Table.HeaderCell>\n                    <Table.HeaderCell>Options</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n\n                {/* This maps the todos recieved as a prop */}\n\n                {props\n                    .todos\n                    .map(t => {\n\n                        // If the todo is being edited, EditTodo Component is rendered here\n\n                        if (t && t.editing) {\n                            return <EditTodo\n                                editTodo={props.editTodo}\n                                cancelEditing={e => props.cancelEditing(t.id)}\n                                key={t.id}\n                                todo={t}/>\n                        }else if(t && !t.deleting){\n\n                            // Is the todo is not being edited the TodoRow stateless component is returned\n\n                            return <TodoRow\n                                todo={t}\n                                key={t.id}\n                                completeTodo={e => props.completeTodo(t)}\n                                startEditing={e => props.startEditing(t.id)}\n                                deleteTodo={e=> props.deleteTodo(t)}\n                            />\n                        }\n                    })}\n                \n                {/* This EditTodo component is used as a Create new Todo Component */}\n                {/* Thus by using the same component for both use, we can reuse a lot of the codes */}\n                \n                <EditTodo createTodo={props.createTodo} />\n            </Table.Body>\n\n        </Table>\n    )\n}\n\nexport default TodoTable;","import React, { Component } from 'react';\nimport * as TodoActions from '../../actions/todoActions'\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux'\nimport { PropTypes } from 'prop-types'\nimport TodoTable from '../todoComponents/todoTable';\n\n\n\nexport class TodoContainer extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    // Todo Container methods dispatch the actions to the reducer functions. Ordered by CRUD Order\n\n    //Create\n    createTodo = (todo) => {\n        this.props.actions.CreateTodo(todo)\n    }\n\n\n    // No methods for reading, the first loading of data is done in App.js where the\n    // getTodo Action is dispatched\n\n    //Update\n    startEditing = (id) => {\n        this.props.actions.StartEditing(id)\n    }\n    cancelEditing = (id) => {\n        this.props.actions.CancelEditing(id)\n    }\n    editTodo = (todo) => {\n        this.props.actions.UpdateTodo(todo)\n    }\n    completeTodo = (todo) => {\n        this.props.actions.UpdateTodo({...todo, status: 'done'})\n    }\n\n    //Delete\n    deleteTodo = (todo) => {\n        this.props.actions.DeleteTodo(todo)\n    }\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <a className=\"navbar-brand text-center\" href=\"#\">To-Do Application React</a>\n                </nav>\n                <div className=\"container\" style={{marginTop:'50px'}}>\n                <div className=\"todo-container\">\n                    <TodoTable\n                        todos={this.props.todos}\n                        createTodo={this.createTodo}\n                        startEditing={this.startEditing}\n                        cancelEditing={this.cancelEditing}\n                        editTodo={this.editTodo}\n                        completeTodo = {this.completeTodo}\n                        deleteTodo = {this.deleteTodo}\n                    />\n                </div>\n                </div>\n                \n            </div>\n        );\n    }\n}\n\n// Define the property types of this Container Component\n\nTodoContainer.propTypes = {\n    actions: PropTypes.object.isRequired,\n    todos: PropTypes.array.isRequired\n}\n\n// This maps the state to the property of the component\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        todos: state.todos\n    }\n}\n\n// This maps the dispatch to the property of the component\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators(TodoActions, dispatch)\n    }\n}\n\n// The connect function connects the Redux Dispatch and state to the Todo Container Component.\n// Without this the Component wont be functional.\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoContainer);","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom'\n\n// The Todo Container Component\n\nimport TodoContainer from './component/container/todoContainer'\n\n\n// The Routing Component providing all the routing Configuration\n\nconst Routes = (props) => {\n    return (\n        <BrowserRouter>\n            <Switch>\n\n                {/* It's setup at the default index route */}\n\n                <Route path=\"/\" component={TodoContainer} />\n            </Switch>\n        </BrowserRouter>\n    )\n}\n\nexport { Routes }","import * as TodoActions from '../actions/todoActions'\n\n\n\n// We are dividing the reducers using a technique called Reducer composition.\n// By doing this we are seperating the reducer for the Collection and the Individual Item\n\n\n//The collection Reducer, It handles only the collection\n\nexport function TodoListReducer(state = [], action) {\n    switch (action.type) {\n\n        // The cases ordered in CRUD order.\n\n        // Create\n        case TodoActions.CREATE_TODO_SUCCESS: {\n                return [\n                    ...state,\n                    action.todo\n                ];\n        }\n            \n        //Read    \n        case TodoActions.GET_TODOS_SUCCESS: {\n            \n            return action.todos.data;\n\n        }\n        \n        // The following Cases handle the data by mapping it. Mostly because they are related with the modification of a single Data\n        \n        //Update    \n        case TodoActions.START_EDITING: {\n            \n            return state.map(s => todo(s, action))\n\n        }\n        case TodoActions.CANCEL_EDITING: {\n            \n            return state.map(s => todo(s, action))\n\n        }\n        case TodoActions.UPDATE_TODO: {\n\n            return state.map(s => todo(s, action))\n            \n        }\n        case TodoActions.UPDATE_TODO_SUCCESS: {\n\n            return state.map(s => todo(s, action))\n\n        }\n        \n        //Delete    \n        case TodoActions.DELETE_TODO: {\n\n            return state.map(s => todo(s, action))\n\n        }\n        case TodoActions.DELETE_TODO_SUCCESS: {\n\n            return state.filter(s => todo(s, action))\n\n        }\n            \n        default:\n            return state\n    }\n}\n\n\n//The individual Reducer. It handles only one Todo Object.\n\n\nconst todo = (state, action) => {\n\n    // If the mapped todo of the previous state matches with the new ID of the action, \n    // Only then proceed to the Reducer Switch case\n\n    if (state.id != (action.id || action.todo.id)) {\n        return state;\n    }\n\n    switch (action.type) {\n\n        case TodoActions.START_EDITING:\n            {\n                return {\n                    ...state,\n                    editing: true\n                }\n            }\n\n        case TodoActions.CANCEL_EDITING:\n            {\n                return {\n                    ...state,\n                    editing: false\n                }\n            }\n\n        case TodoActions.UPDATE_TODO:\n            {\n                return {\n                    ...state,\n                    editing: false,\n                    updating: true\n                }\n            }\n\n        case TodoActions.UPDATE_TODO_SUCCESS:\n            {\n                return {\n                    ...state,\n                    ...action.todo,\n                    updating: false\n                }\n            }\n\n        case TodoActions.DELETE_TODO:\n            {\n                return {\n                    ...state,\n                    deleting: true\n                }\n            }\n\n        case TodoActions.DELETE_TODO_SUCCESS:\n            {\n                return false\n            }\n\n        default:\n            {\n                return state;\n            }\n    }\n}","import {combineReducers} from 'redux'\nimport {TodoListReducer} from './todoReducers'\n\n\n//One root reducer for the whole app. This is done so that the app will have one single reducer to manage lots of other resources.\n// And also communication between the reducers will be easier to maintain.\n \nconst rootReducer = combineReducers({\n    todos: TodoListReducer\n})\n\nexport default rootReducer","import { createStore, applyMiddleware } from 'redux'\n\n//Redux Thunk need to be added as a middleware\n\nimport thunkMiddleware from 'redux-thunk'\n\n// Redux logging middleware\nimport { createLogger } from 'redux-logger'\n\n// Import the root reducer\nimport rootReducer from '../reducers/rootReducer'\n\n\n// Create the redux logging middleware \nconst loggerMiddleware = createLogger()\n\n\n// Configuring the Store. PreloadState is the initial State.\nexport function configureStore(preloadedState) {\n\n  return createStore(\n    rootReducer,\n    preloadedState,\n\n    //Apply the middleware usign the Redux's provided applymiddleware function\n\n    applyMiddleware(\n      thunkMiddleware,\n      loggerMiddleware\n    )\n  )\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\n\n//Import the modified App.css\nimport './App.css';\n\n// Import the Routes component, which contains our Route setup\n\nimport { Routes } from './Routes'\n\n\n// Provider component is a react-redux component for setting up the Redux Store\n\nimport { Provider } from 'react-redux'\n\n// Import the ConfigureStore that holds the initial Configuration\n\nimport { configureStore } from './store/configureStore'\n\nimport * as TodoActions from './actions/todoActions'\n\n\n// Create a Store from the Configuration, we can pass a Initial State here\n\nconst store = configureStore()\n\n// At first dispatch a Get Todos Actions, So we'll recieve the Todos \n// fetched from the server at the start of the app\n\nstore.dispatch(TodoActions.GetTodos())\n\nconst App = (props) => {\n  return (\n    \n    //Provider needs to contain all the Containers/Components it will give access to the Store\n\n      <Provider store={store} >\n        <Routes />\n      </Provider>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as registerServiceWorker from './serviceWorker';\n\n//Import Semantic UI and Font-awesome\nimport 'semantic-ui-css/semantic.min.css';\nimport 'font-awesome/css/font-awesome.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nregisterServiceWorker.register();"],"sourceRoot":""}